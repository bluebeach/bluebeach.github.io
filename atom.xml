<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Kong</title>
  <subtitle>Life&#39;s a cycle</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-17T17:49:18.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chen Jun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/11/18/hello-world/"/>
    <id>http://yoursite.com/2016/11/18/hello-world/</id>
    <published>2016-11-17T17:49:18.000Z</published>
    <updated>2016-11-17T17:49:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一次日志打印问题的排查</title>
    <link href="http://yoursite.com/2016/04/04/log-bug/"/>
    <id>http://yoursite.com/2016/04/04/log-bug/</id>
    <published>2016-04-03T18:23:08.000Z</published>
    <updated>2016-11-17T18:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>测试服务器上无日志打印。</p>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>第一次遇到这种情况，构建成功，部署成功，然后打日志毫无反应。</p>
<p>于是我开始怀疑人生…可是不是解决办法呀！</p>
<p>于是我重新拉了一个崭新的线上分支部署到测试机上去，发现日志可以正常打印！</p>
<p>恩…仔细回想了一下我对开发分支的改动中…怀疑是因为修改了maven依赖导致日志的jar包冲突导致的。</p>
<p>跑到测试机上分别查询了加载的jar包，果然如此！</p>
<p><em>正常日志依赖：</em></p>
<p><img src="/images/good-lib.jpg" alt="正常日志依赖"></p>
<p><em>异常日志依赖：</em></p>
<p><img src="/images/bad-lib.jpg" alt="异常日志依赖"></p>
<p>对比得出，应该就是因为<code>logback-classic</code>和<code>logback-core</code>的依赖导致了日志打不出来。(该系统一直使用log4j日志框架)</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>在项目根目录运行<code>mvn dependency:tree &gt; tree</code>，打印maven依赖树。</p>
<p>排除掉所有对logback的直接和间接依赖即可。</p>
<p><strong>为了一劳永逸，直接在主pom.xml中dependencyManagement依赖logback的999-not-exist版本(空jar包)。</strong></p>
<h2 id="深入分析"><a href="#深入分析" class="headerlink" title="深入分析"></a>深入分析</h2><p>以上，问题的确解决了。</p>
<p><strong>But 究竟为什么logback包的依赖引入进来，日志就不打印了呢？</strong></p>
<p>为了解决这个疑惑，经过一番资料查询，结论是这样的：</p>
<p><strong>slf4j-log4j12.jar 与 logback-classic.jar 互斥，二者只能存在其一。</strong></p>
<h2 id="详细拓展："><a href="#详细拓展：" class="headerlink" title="详细拓展："></a>详细拓展：</h2><p>日志框架分为 <strong>接口框架</strong> 和 <strong>实现框架</strong></p>
<p>接口框架包括 Apache Common Logging（之前叫 Jakarta Commons Logging，JCL）和SLF4J。</p>
<p>实现框架包括 log4j 和 logback。</p>
<p><em>他们之间的关系如下图：</em></p>
<p><img src="/images/log.jpg" alt="架构图"></p>
<p>其中JCL-over-SLF4j的存在，是因为有些项目中已经采用了JCL架构的（因为出现的早）想要转换到SLF4J架构（因为性能高）而存在的一个桥接器。顾名思义，名字为 XXX-over-slf4j 表示将日志重定向到了slf4j中。</p>
<p><strong>由于JCL-over-SLF4J和原来的JCL具有完全相同的API，因此两者是不能共存的。排除JCL依赖的方法为将<code>commons-logging</code> 设置成<code>&lt;scope&gt;provided&lt;/scope&gt;</code> 或者 依赖一个<code>99.0-does-not-exist</code>版本的<code>commons-logging</code>（一个空无一物的特殊jar包）</strong></p>
<p>具体的jar包调用关系为：（假设采用slf4j + log4j的组合）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">commons-logging log</div><div class="line">-&gt; jcl-over-slf4j</div><div class="line">-&gt; slf4j-api</div><div class="line">-&gt; slf4j-log4j12</div><div class="line">-&gt; log4j</div><div class="line">-&gt; 输出日志</div></pre></td></tr></table></figure>
<p>当既依赖了slf4j-log4j12，又依赖了logback-classic时，slf4j会产生让人非常迷惑的结果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoggerFactory.getLogger(xxx.class);</div></pre></td></tr></table></figure>
<p>跟进getLogger方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ILoggerFactory iLoggerFactory = getILoggerFactory();</div><div class="line"><span class="keyword">return</span> iLoggerFactory.getLogger(name);</div></pre></td></tr></table></figure>
<p>使用了getILoggerFactory()返回的工厂，跟进getILoggerFactory方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ILoggerFactory <span class="title">getILoggerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</div><div class="line">    INITIALIZATION_STATE = ONGOING_INITIALIZATION;</div><div class="line">    <span class="comment">//初始化</span></div><div class="line">    performInitialization();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">switch</span> (INITIALIZATION_STATE) &#123;</div><div class="line">    <span class="keyword">case</span> SUCCESSFUL_INITIALIZATION:</div><div class="line">      <span class="keyword">return</span> StaticLoggerBinder.getSingleton().getLoggerFactory();</div><div class="line">    <span class="keyword">case</span> NOP_FALLBACK_INITIALIZATION:</div><div class="line">      <span class="keyword">return</span> NOP_FALLBACK_FACTORY;</div><div class="line">    <span class="keyword">case</span> FAILED_INITIALIZATION:</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(UNSUCCESSFUL_INIT_MSG);</div><div class="line">    <span class="keyword">case</span> ONGOING_INITIALIZATION:</div><div class="line">      <span class="comment">// support re-entrant behavior.</span></div><div class="line">      <span class="comment">// See also http://bugzilla.slf4j.org/show_bug.cgi?id=106</span></div><div class="line">      <span class="keyword">return</span> TEMP_FACTORY;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unreachable code"</span>);	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码中，先初始化，然后根据初始化的结果来选择LoggerFactory。进入performInitialization()方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">performInitialization</span><span class="params">()</span> </span>&#123;</div><div class="line"> bind();</div><div class="line">  <span class="keyword">if</span> (INITIALIZATION_STATE == SUCCESSFUL_INITIALIZATION) &#123;</div><div class="line">    versionSanityCheck();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化代码中，主要完成slf4j与具体的日志实现绑定的逻辑，进入bind方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Set staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();</div><div class="line"><span class="comment">// 多绑定情况打印</span></div><div class="line">reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);</div><div class="line"><span class="comment">// 进行绑定</span></div><div class="line">StaticLoggerBinder.getSingleton();</div><div class="line">INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION;</div><div class="line"><span class="comment">// 打印真正的绑定实现</span></div><div class="line">reportActualBinding(staticLoggerBinderPathSet);</div><div class="line">emitSubstituteLoggerWarning();</div></pre></td></tr></table></figure>
<p>在findPossibleStaticLoggerBinderPathSet()中，寻找<code>org/slf4j/impl/StaticLoggerBinder.class</code>接口的实现类，而slf4j-log4j21和logback-classic中都有对应的实现类，当两者都存在时，<code>reportActualBinding</code>的打印情况如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]</div></pre></td></tr></table></figure>
<p><code>reportMultipleBindingAmbiguity</code>的打印如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SLF4J: Found binding in [jar:file:/home/admin/msggrab/target/msggrab.war/WEB-INF/lib/logback-classic<span class="number">-1.0</span><span class="number">.13</span>.jar!/org/slf4j/impl/StaticLoggerBinder.<span class="keyword">class</span>]</div><div class="line">SLF4J: Found binding in [jar:file:/home/admin/msggrab/target/msggrab.war/WEB-INF/lib/slf4j-log4j12<span class="number">-1.7</span><span class="number">.5</span>.jar!/org/slf4j/impl/StaticLoggerBinder.<span class="keyword">class</span>]</div><div class="line">SLF4J: See http:<span class="comment">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></div></pre></td></tr></table></figure>
<h3 id="而我之所以打不出日志，是因为最终选择了logback作为了StaticLoggerBinder-class的实现，如下图"><a href="#而我之所以打不出日志，是因为最终选择了logback作为了StaticLoggerBinder-class的实现，如下图" class="headerlink" title="而我之所以打不出日志，是因为最终选择了logback作为了StaticLoggerBinder.class的实现，如下图"></a>而我之所以打不出日志，是因为最终选择了logback作为了<code>StaticLoggerBinder.class</code>的实现，如下图</h3><p><img src="/images/debug.jpg" alt="debug"></p>
<p><strong>可是，为什么当slf4j-log4j12和logback都存在的情况下，会优先使用logback呢？？？</strong></p>
<p>…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; class=&quot;headerlink&quot; title=&quot;问题现象&quot;&gt;&lt;/a&gt;问题现象&lt;/h2&gt;&lt;p&gt;测试服务器上无日志打印。&lt;/p&gt;
&lt;h2 id=&quot;原因分析&quot;&gt;&lt;a href=&quot;#原因分析&quot; class=&quot;headerli
    
    </summary>
    
    
  </entry>
  
</feed>
